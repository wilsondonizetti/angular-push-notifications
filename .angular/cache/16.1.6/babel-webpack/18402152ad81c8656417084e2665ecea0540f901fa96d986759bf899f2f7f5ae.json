{"ast":null,"code":"import { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { PDVService } from './services/pdv.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nimport * as i2 from \"./services/pdv.service\";\nexport class AppModule {\n  constructor(swPush, update, pdvService) {\n    this.swPush = swPush;\n    this.update = update;\n    this.pdvService = pdvService;\n    this.VAPID_PUBLIC_KEY = \"BLjKEyVxw9XVPfhrX1HwuTOeHTcnOf5BacH6w7k7_LTTVnqX6A9S6OOpE27pZTNbcB_mrIRP73WvG_P-8aPRx0A\";\n    update.versionUpdates.subscribe(update => {\n      console.log(\"Nova versão disponível\");\n    });\n    this.SubscribeToPush();\n    // swPush.messages.subscribe(msg =>{\n    //     console.log('msg', JSON.stringify(msg));\n    // });\n    //this.subscribeToNotificationClicks();\n  }\n\n  subscribeToNotificationClicks() {\n    // #docregion subscribe-to-notification-clicks\n    this.swPush.notificationClicks.subscribe(({\n      action,\n      notification\n    }) => {\n      // TODO: Do something in response to notification click.\n      console.log('action', action);\n      console.log('notification', notification);\n    });\n    // #enddocregion subscribe-to-notification-clicks\n  }\n\n  SubscribeToPush() {\n    Notification.requestPermission().then(result => {\n      if (result === \"granted\") {\n        navigator.serviceWorker.ready.then(registration => {\n          console.info('registration');\n          this.pdvService.addPushSubscriber().subscribe(result => {\n            console.info('pdv result');\n            const dados = JSON.parse(result.body);\n            for (let index = 0; index < dados.length; index++) {\n              const element = dados[index].notification;\n              console.log('inf', element);\n              registration.showNotification(element.title, {\n                body: element.body,\n                icon: element.icon\n              });\n            }\n          });\n        });\n      }\n    });\n  }\n}\nAppModule.ɵfac = function AppModule_Factory(t) {\n  return new (t || AppModule)(i0.ɵɵinject(i1.SwPush), i0.ɵɵinject(i1.SwUpdate), i0.ɵɵinject(i2.PDVService));\n};\nAppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: AppModule,\n  bootstrap: [AppComponent]\n});\nAppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  providers: [PDVService],\n  imports: [BrowserModule, HttpClientModule, ServiceWorkerModule.register('ngsw-worker.js', {\n    enabled: true,\n    // Register the ServiceWorker as soon as the application is stable\n    // or after 30 seconds (whichever comes first).\n    registrationStrategy: 'registerWhenStable:30000'\n  })]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppModule, {\n    declarations: [AppComponent],\n    imports: [BrowserModule, HttpClientModule, i1.ServiceWorkerModule]\n  });\n})();","map":{"version":3,"names":["BrowserModule","AppComponent","ServiceWorkerModule","PDVService","HttpClientModule","AppModule","constructor","swPush","update","pdvService","VAPID_PUBLIC_KEY","versionUpdates","subscribe","console","log","SubscribeToPush","subscribeToNotificationClicks","notificationClicks","action","notification","Notification","requestPermission","then","result","navigator","serviceWorker","ready","registration","info","addPushSubscriber","dados","JSON","parse","body","index","length","element","showNotification","title","icon","i0","ɵɵinject","i1","SwPush","SwUpdate","i2","bootstrap","imports","register","enabled","registrationStrategy","declarations"],"sources":["E:\\Estudo\\Tecnologias\\Angular\\my-pwa\\src\\app\\app.module.ts"],"sourcesContent":["import { NgModule, isDevMode } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule, SwPush, SwUpdate } from '@angular/service-worker';\nimport { PDVService } from './services/pdv.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport INotificationMessage from './models/INotificationMessage';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: true,//!isDevMode(),\n      // Register the ServiceWorker as soon as the application is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000'\n    })\n  ],\n  providers: [\n    PDVService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  readonly VAPID_PUBLIC_KEY = \"BLjKEyVxw9XVPfhrX1HwuTOeHTcnOf5BacH6w7k7_LTTVnqX6A9S6OOpE27pZTNbcB_mrIRP73WvG_P-8aPRx0A\";\n\n  constructor(private swPush: SwPush, private update: SwUpdate, private pdvService: PDVService) {\n    update.versionUpdates.subscribe(update => {\n      console.log(\"Nova versão disponível\");\n    });\n\n    this.SubscribeToPush();\n    // swPush.messages.subscribe(msg =>{\n    //     console.log('msg', JSON.stringify(msg));\n    // });\n    //this.subscribeToNotificationClicks();\n  }\n  private subscribeToNotificationClicks() {\n    // #docregion subscribe-to-notification-clicks\n    this.swPush.notificationClicks.subscribe(\n      ({ action, notification }) => {\n        // TODO: Do something in response to notification click.\n        console.log('action', action);\n        console.log('notification', notification);\n      });\n    // #enddocregion subscribe-to-notification-clicks\n  }\n  SubscribeToPush() {\n    Notification.requestPermission().then((result) => {\n      if (result === \"granted\") {\n        navigator.serviceWorker.ready.then(registration => {\n          console.info('registration');\n          this.pdvService.addPushSubscriber().subscribe(result => {\n            console.info('pdv result');\n            const dados: Array<INotificationMessage> = JSON.parse(result.body);\n\n            for (let index = 0; index < dados.length; index++) {\n              const element = dados[index].notification;\n              console.log('inf', element);\n              registration.showNotification(element.title, {\n                body: element.body,\n                icon: element.icon\n              });\n            }\n          });\n        });\n      }\n    });\n  };\n  // this.swPush.requestSubscription({\n  //   serverPublicKey:this.VAPID_PUBLIC_KEY\n  // })\n  // .then(sub => {\n  //   console.log('SubscribeToPush', JSON.stringify(sub));\n  // })\n  // .catch(err =>{\n  //   console.error(\"Ocorreu um erro:\"+ err);\n  // })\n}\n"],"mappings":"AACA,SAASA,aAAa,QAAQ,2BAA2B;AAEzD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,mBAAmB,QAA0B,yBAAyB;AAC/E,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,gBAAgB,QAAQ,sBAAsB;;;;AAsBvD,OAAM,MAAOC,SAAS;EAGpBC,YAAoBC,MAAc,EAAUC,MAAgB,EAAUC,UAAsB;IAAxE,KAAAF,MAAM,GAANA,MAAM;IAAkB,KAAAC,MAAM,GAANA,MAAM;IAAoB,KAAAC,UAAU,GAAVA,UAAU;IAFvE,KAAAC,gBAAgB,GAAG,yFAAyF;IAGnHF,MAAM,CAACG,cAAc,CAACC,SAAS,CAACJ,MAAM,IAAG;MACvCK,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvC,CAAC,CAAC;IAEF,IAAI,CAACC,eAAe,EAAE;IACtB;IACA;IACA;IACA;EACF;;EACQC,6BAA6BA,CAAA;IACnC;IACA,IAAI,CAACT,MAAM,CAACU,kBAAkB,CAACL,SAAS,CACtC,CAAC;MAAEM,MAAM;MAAEC;IAAY,CAAE,KAAI;MAC3B;MACAN,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEI,MAAM,CAAC;MAC7BL,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEK,YAAY,CAAC;IAC3C,CAAC,CAAC;IACJ;EACF;;EACAJ,eAAeA,CAAA;IACbK,YAAY,CAACC,iBAAiB,EAAE,CAACC,IAAI,CAAEC,MAAM,IAAI;MAC/C,IAAIA,MAAM,KAAK,SAAS,EAAE;QACxBC,SAAS,CAACC,aAAa,CAACC,KAAK,CAACJ,IAAI,CAACK,YAAY,IAAG;UAChDd,OAAO,CAACe,IAAI,CAAC,cAAc,CAAC;UAC5B,IAAI,CAACnB,UAAU,CAACoB,iBAAiB,EAAE,CAACjB,SAAS,CAACW,MAAM,IAAG;YACrDV,OAAO,CAACe,IAAI,CAAC,YAAY,CAAC;YAC1B,MAAME,KAAK,GAAgCC,IAAI,CAACC,KAAK,CAACT,MAAM,CAACU,IAAI,CAAC;YAElE,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGJ,KAAK,CAACK,MAAM,EAAED,KAAK,EAAE,EAAE;cACjD,MAAME,OAAO,GAAGN,KAAK,CAACI,KAAK,CAAC,CAACf,YAAY;cACzCN,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEsB,OAAO,CAAC;cAC3BT,YAAY,CAACU,gBAAgB,CAACD,OAAO,CAACE,KAAK,EAAE;gBAC3CL,IAAI,EAAEG,OAAO,CAACH,IAAI;gBAClBM,IAAI,EAAEH,OAAO,CAACG;eACf,CAAC;;UAEN,CAAC,CAAC;QACJ,CAAC,CAAC;;IAEN,CAAC,CAAC;EACJ;;AA7CWlC,SAAS,C;mBAATA,SAAS,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAE,QAAA,GAAAJ,EAAA,CAAAC,QAAA,CAAAI,EAAA,CAAA1C,UAAA;AAAA;AAATE,SAAS,C;QAATA,SAAS;EAAAyC,SAAA,GAFR7C,YAAY;AAAA;AAEbI,SAAS,C;aALT,CACTF,UAAU,CACX;EAAA4C,OAAA,GAXC/C,aAAa,EACbI,gBAAgB,EAChBF,mBAAmB,CAAC8C,QAAQ,CAAC,gBAAgB,EAAE;IAC7CC,OAAO,EAAE,IAAI;IACb;IACA;IACAC,oBAAoB,EAAE;GACvB,CAAC;AAAA;;2EAOO7C,SAAS;IAAA8C,YAAA,GAjBlBlD,YAAY;IAAA8C,OAAA,GAGZ/C,aAAa,EACbI,gBAAgB,EAAAsC,EAAA,CAAAxC,mBAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}