{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { PDVService } from './services/pdv.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nimport * as i2 from \"./services/pdv.service\";\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {\n    constructor(swPush, update, pdvService) {\n      this.swPush = swPush;\n      this.update = update;\n      this.pdvService = pdvService;\n      this.VAPID_PUBLIC_KEY = \"BLjKEyVxw9XVPfhrX1HwuTOeHTcnOf5BacH6w7k7_LTTVnqX6A9S6OOpE27pZTNbcB_mrIRP73WvG_P-8aPRx0A\";\n      update.versionUpdates.subscribe(update => {\n        console.log(\"Nova versão disponível\");\n      });\n      this.SubscribeToPush();\n      swPush.messages.subscribe(msg => {\n        console.log('msg', JSON.stringify(msg));\n      });\n      //this.subscribeToNotificationClicks();\n    }\n\n    subscribeToNotificationClicks() {\n      // #docregion subscribe-to-notification-clicks\n      this.swPush.notificationClicks.subscribe(({\n        action,\n        notification\n      }) => {\n        // TODO: Do something in response to notification click.\n        console.log('action', action);\n        console.log('notification', notification);\n      });\n      // #enddocregion subscribe-to-notification-clicks\n    }\n\n    SubscribeToPush() {\n      navigator.serviceWorker.ready.then(registration => {\n        this.pdvService.addPushSubscriber(null).subscribe(result => {\n          for (let index = 0; index < result.length; index++) {\n            const element = result[index];\n            console.log('inf', result[index]);\n            registration.showNotification(result[index].title, {\n              body: result[index].body,\n              icon: result[index].icon,\n              vibrate: [50, 100, 50],\n              actions: []\n            });\n          }\n        });\n      });\n      // this.swPush.requestSubscription({\n      //   serverPublicKey:this.VAPID_PUBLIC_KEY\n      // })\n      // .then(sub => {\n      //   console.log('SubscribeToPush', JSON.stringify(sub));\n      // })\n      // .catch(err =>{\n      //   console.error(\"Ocorreu um erro:\"+ err);\n      // })\n    }\n  }\n\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)(i0.ɵɵinject(i1.SwPush), i0.ɵɵinject(i1.SwUpdate), i0.ɵɵinject(i2.PDVService));\n  };\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [PDVService],\n    imports: [BrowserModule, HttpClientModule, ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: !isDevMode(),\n      // Register the ServiceWorker as soon as the application is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000'\n    })]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}